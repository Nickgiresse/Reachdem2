import { PrismaClient } from '@/generated/prisma';

const prisma = new PrismaClient();

async function testContactGroupIntegration() {
  try {
    console.log('üß™ Test d\'int√©gration Contact-Groupe...\n');

    // 1. V√©rifier qu'il y a des contacts et des groupes
    const contacts = await prisma.contact.findMany({
      take: 3,
      include: {
        groups: {
          include: {
            group: true
          }
        }
      }
    });

    const groups = await prisma.group.findMany({
      take: 2,
      include: {
        contacts: {
          include: {
            contact: true
          }
        }
      }
    });

    console.log(`üìä √âtat initial:`);
    console.log(`   - Contacts trouv√©s: ${contacts.length}`);
    console.log(`   - Groupes trouv√©s: ${groups.length}\n`);

    if (contacts.length === 0) {
      console.log('‚ùå Aucun contact trouv√©. Cr√©ez d\'abord des contacts.');
      return;
    }

    if (groups.length === 0) {
      console.log('‚ùå Aucun groupe trouv√©. Cr√©ez d\'abord des groupes.');
      return;
    }

    // 2. Afficher les d√©tails des contacts et groupes
    console.log('üë• Contacts:');
    contacts.forEach((contact, index) => {
      console.log(`   ${index + 1}. ${contact.first_name} ${contact.last_name} (${contact.contact_id})`);
      console.log(`      Groupes: ${contact.groups.map(gc => gc.group.name).join(', ') || 'Aucun'}`);
    });

    console.log('\nüìÅ Groupes:');
    groups.forEach((group, index) => {
      console.log(`   ${index + 1}. ${group.name} (${group.group_id})`);
      console.log(`      Membres: ${group.contacts.map(gc => `${gc.contact.first_name} ${gc.contact.last_name}`).join(', ') || 'Aucun'}`);
    });

    // 3. Tester l'ajout d'un contact √† un groupe
    const contactToAdd = contacts[0];
    const groupToAddTo = groups[0];

    console.log(`\nüîÑ Test d'ajout: ${contactToAdd.first_name} ${contactToAdd.last_name} ‚Üí ${groupToAddTo.name}`);

    // V√©rifier si le contact est d√©j√† dans le groupe
    const existingRelation = await prisma.groupContact.findUnique({
      where: {
        group_id_contact_id: {
          group_id: groupToAddTo.group_id,
          contact_id: contactToAdd.contact_id
        }
      }
    });

    if (existingRelation) {
      console.log('‚ÑπÔ∏è  Le contact est d√©j√† dans ce groupe.');
    } else {
      // Ajouter le contact au groupe
      await prisma.groupContact.create({
        data: {
          group_id: groupToAddTo.group_id,
          contact_id: contactToAdd.contact_id,
          added_at: new Date()
        }
      });
      console.log('‚úÖ Contact ajout√© au groupe avec succ√®s!');
    }

    // 4. V√©rifier le r√©sultat
    const updatedContact = await prisma.contact.findUnique({
      where: { contact_id: contactToAdd.contact_id },
      include: {
        groups: {
          include: {
            group: true
          }
        }
      }
    });

    const updatedGroup = await prisma.group.findUnique({
      where: { group_id: groupToAddTo.group_id },
      include: {
        contacts: {
          include: {
            contact: true
          }
        }
      }
    });

    console.log('\nüìã R√©sultat:');
    console.log(`   Contact: ${updatedContact?.first_name} ${updatedContact?.last_name}`);
    console.log(`   Groupes: ${updatedContact?.groups.map(gc => gc.group.name).join(', ') || 'Aucun'}`);
    console.log(`   Groupe: ${updatedGroup?.name}`);
    console.log(`   Membres: ${updatedGroup?.contacts.map(gc => `${gc.contact.first_name} ${gc.contact.last_name}`).join(', ') || 'Aucun'}`);

    // 5. Test de l'API REST
    console.log('\nüåê Test de l\'API REST...');
    
    // Simuler un appel √† l'API add-contacts
    const testGroupId = groups[0].group_id;
    const testContactIds = contacts.slice(0, 2).map(c => c.contact_id);

    console.log(`   Groupe ID: ${testGroupId}`);
    console.log(`   Contact IDs: ${testContactIds.join(', ')}`);

    // V√©rifier que les relations existent ou peuvent √™tre cr√©√©es
    for (const contactId of testContactIds) {
      const relation = await prisma.groupContact.findUnique({
        where: {
          group_id_contact_id: {
            group_id: testGroupId,
            contact_id: contactId
          }
        }
      });

      if (relation) {
        console.log(`   ‚úÖ Relation existe: Contact ${contactId} ‚Üí Groupe ${testGroupId}`);
      } else {
        console.log(`   ‚ö†Ô∏è  Relation manquante: Contact ${contactId} ‚Üí Groupe ${testGroupId}`);
      }
    }

    console.log('\n‚úÖ Test d\'int√©gration termin√© avec succ√®s!');

  } catch (error) {
    console.error('‚ùå Erreur lors du test:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// Ex√©cuter le test
testContactGroupIntegration();
